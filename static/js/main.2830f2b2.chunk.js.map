{"version":3,"sources":["images/piechart1.png","images/image-ANIMATION.gif","images/tableData.png","images/JSONdata.png","StoryPanel.js","MapFunctions.js","stacked-bar.js","SimpleWebsite.js","index.js"],"names":["module","exports","StoryPanel","m_actionFilter","state","visible","id","props","anchorname","paragraphs","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","typeContent","imgUrl","setState","res","i","this","length","push","content","text","code","image","title","actionFilter","className","onChange","threshold","map","paragraph","key","filter","Component","StoryParagraph","m_firedAction","m_statusChanged","m_filterArray","paragraphChange","handleScroll","bind","window","removeEventListener","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","bottomOffset","bottom","highlighted","action","objects","addEventListener","src","alt","ReactHtmlParser","MapFunctions","m_filterStartYear","activeYear","m_filterEndYear","m_filterType","m_filterName","m_initiated","self","grump","m_colors","currentYear","rawtypes","types","getFuel","type","fuelDetail","roundToOne","capacity","Math","round","mapboxgl","accessToken","Map","container","style","zoom","center","on","addSource","data","tooltip","Marker","tooltipContainer","offset","setLngLat","addTo","e","console","log","features","properties","site","lngLat","getCanvas","cursor","testFunction","show","color","name","lowCarbon","operator","open","fuel","chp","render","React","createElement","PopupContent","unmountComponentAtNode","prevState","updateFilters","active","drawOnMap","isStyleLoaded","getLayer","removeLayer","circlecolor","colored","paint","differentSizes","property","base","stops","value","opacity","addLayer","source","document","init","o","yearOpen","plantColor","setTooltip","filtertype","setFilter","height","ref","el","mapContainer","Stackedbarchart","width","percentages","reverseStackOrder","dataKey","stackId","fill","layout","align","verticalAlign","iconType","PureComponent","jsfiddleUrl","SimpleWebsite","img1","gif2","ScrollyTeller","imagesOnsite","tableData","jsonData","IMAGE","MAP","NONE","COMPONENT","updateDimensions","innerWidth","innerHeight","panelHeight","percentageCalcs","sections","activeId","activeTypeContent","panelChanged","updatePercentages","year","arr","yearPerc","obj","percentage","t","UNSAFE_componentWillMount","sectiondata","renderparagraphs","createPanelContent","section","helperArray","tempArr","j","data2","yearstart","yearStart","yearend","yearEnd","k","key2","num","allPanels","setDrawOnMap","drawOnMapi","imgUrlId","activeImageUrl","setActiveMulti","setActive","ttype","setActiveName","toggleActive","undefined","vfilter","result","feature","replace","url","actions","highlight","keywords","cap","mapdemo","imageId","lower","c","toUpperCase","margin","ImageDisp","NavMenuItem","selector","alignToTop","getElementById"],"mappings":"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","file":"static/js/main.2830f2b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piechart1.f650fda7.png\";","module.exports = __webpack_public_path__ + \"static/media/image-ANIMATION.97aed607.gif\";","module.exports = __webpack_public_path__ + \"static/media/tableData.bce7c74a.png\";","module.exports = __webpack_public_path__ + \"static/media/JSONdata.a1db074b.png\";","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    anchorname: this.props.anchorname,\r\n    paragraphs: []\r\n  };\r\n\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id, this.props.typeContent, this.props.imgUrl)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"code\": this.props.paragraphs[i].props.content.code, \"image\": this.props.paragraphs[i].props.content.image, \"title\": this.props.paragraphs[i].props.content.title, \"filter\": this.props.paragraphs[i].props.actionFilter }\r\n      )\r\n\r\n\r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={this.props.anchorname} className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n        </Observer>\r\n\r\n        <div id={this.props.anchorname + \"_id\"} className=\"panelcontent\">\r\n          {this.state.paragraphs.map(\r\n            (paragraph, i) =>\r\n              <StoryParagraph\r\n                key={this.state.anchorname + \"_id_p\" + i}\r\n                id={this.state.anchorname + \"_id_p\" + i}\r\n                title={paragraph.title}\r\n                paragraph={paragraph.text}\r\n                code={paragraph.code}\r\n                image={paragraph.image}\r\n                actionFilter={paragraph.filter}\r\n\r\n              />\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n\r\n  m_firedAction = false\r\n  m_statusChanged = false\r\n  m_filterArray = [\"any\", []]\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n  handleScroll(event) {\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n      var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n      if (!this.m_firedAction) {\r\n        if (this.state.highlighted) {\r\n          if (this.props.actionFilter) { //if this has any actions supplied\r\n\r\n            this.props.actionFilter.action(this.props.actionFilter.objects, true)\r\n            //   this.m_mapFunctions.setFilterTypeString(this.m_filterArray)\r\n            //TODO HERE this.props.actionFilter.action\r\n          }\r\n          this.m_firedAction = true;\r\n        } else {\r\n          if (this.props.actionFilter) {\r\n\r\n            this.props.actionFilter.action(null, true)\r\n            // this.m_mapFunctions.showAllTypes()\r\n            this.m_firedAction = true;\r\n          }\r\n        }\r\n      }\r\n      if ((topOffset > 150 && topOffset < 300) || (topOffset < 150 && topOffset > 0 && bottomOffset > 300)) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if (!this.state.highlighted) {\r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n          this.m_firedAction = false\r\n        }\r\n\r\n\r\n      } else {\r\n\r\n        if (this.state.highlighted) {\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    /*if (this.props.actionFilter) {\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      \r\n     \r\n    }*/\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Observer\r\n        onChange={this.paragraphChange}\r\n      >\r\n        <div> {this.props.title ?\r\n          <h3>{this.props.title}</h3>\r\n          :\r\n          \"\"}\r\n          <div\r\n            className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n            id={this.props.id}>\r\n            {this.props.image ?\r\n              <div className=\"inTextImage\">\r\n                <img src={this.props.image} alt={this.props.image} />\r\n              </div>\r\n              :\r\n              \"\"}\r\n            {this.props.code ? <code className=\"codeSection\">{this.props.code}</code> : \"\"}\r\n            <p>\r\n              {ReactHtmlParser(this.props.paragraph)}\r\n            </p>\r\n\r\n          </div>\r\n        </div>\r\n      </Observer>\r\n    )\r\n  }\r\n}","import mapboxgl from 'mapbox-gl'\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n//import geojson from 'geojson'\r\nexport default class MapFunctions extends Component {\r\n\r\n    // set to 2017 initially despite play preview or you get a bug when using the type dropdown\r\n    m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], this.props.activeYear]\r\n    m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], this.props.activeYear]\r\n    m_filterType = ['!=', ['string', ['get', 'type']], 'placeholder']\r\n\r\n    m_filterName = ['!=', ['string', ['get', 'site']], 'placeholder']\r\n\r\n    m_initiated = false\r\n    map = null\r\n\r\n    app = null\r\n    tooltipContainer\r\n    popup\r\n    self = null\r\n    grump = null\r\n    m_colors = {\r\n        \"Coal\": \"#ced1cc\",\r\n        \"Storage\": \"#4e80e5\",\r\n        \"Solar\": \"#ffc83e\",\r\n        \"Nuclear\": \"#dd54b6\",\r\n        \"Oil\": \"#a45edb\",\r\n        \"Hydro\": \"#43cfef\",\r\n        \"Wave & Tidal\": \"#43cfef\",\r\n        \"Wind\": \"#00a98e\",\r\n        \"Biomass\": \"#A7B734\",\r\n        \"Waste\": \"#ea545c\",\r\n        \"Gas\": \"#cc9b7a\",\r\n    }\r\n\r\n    state = {\r\n\r\n        currentYear: this.props.activeYear,\r\n        rawtypes: this.props.types\r\n    }\r\n\r\n\r\n    init() {\r\n        if (!this.m_initiated) {\r\n            mapboxgl.accessToken = \"pk.eyJ1Ijoibm9yYWhhbWEiLCJhIjoiY2ptaGFsZDR5MThrczN1dDhtajc1cTFmMSJ9.VEUImGmfsM77LfjErYxDdQ\"\r\n            this.map = new mapboxgl.Map({\r\n                container: \"map\",\r\n                style: \"mapbox://styles/mapbox/streets-v9\",\r\n                zoom: [5.5],\r\n                center: [0, 55.3781]\r\n            })\r\n\r\n            // const filterType = ['!=', ['string', ['get', 'technology']], 'Battery (Discharging)'];\r\n            var self = this\r\n            this.map.on('load', function(){\r\n                self.map.addSource('powerplants', { type: 'geojson', data: self.props.data });\r\n                const tooltip = new mapboxgl.Marker(this.tooltipContainer, {\r\n                    offset: [-140, 0]\r\n                }).setLngLat([0, 0]).addTo(self.map);\r\n\r\n                self.map.on('mouseenter', 'powerplants', function (e) {\r\n                    // Change the cursor style as a UI indicator.\r\n                    console.log(\"enter: \" + e.features[0].properties.site)\r\n                    tooltip.setLngLat(e.lngLat);\r\n                    self.grump = e.features[0]\r\n                    self.map.getCanvas().style.cursor = 'pointer';\r\n                    self.testFunction(true)\r\n\r\n                })\r\n\r\n                self.map.on('mousemove', 'powerplants', function (e) {\r\n                    tooltip.setLngLat(e.lngLat);\r\n                    self.grump = e.features[0]\r\n                    self.map.getCanvas().style.cursor = 'pointer';\r\n                    self.testFunction(true)\r\n\r\n                })\r\n\r\n                self.map.on('mouseleave', 'powerplants', function (e) {\r\n\r\n                    self.map.getCanvas().style.cursor = '';\r\n                    self.testFunction(false)\r\n                });\r\n                // Change the cursor style as a UI indicator.\r\n                self.map.getCanvas().style.cursor = 'pointer';\r\n                self.m_initiated = true;\r\n            })\r\n    }}\r\n\r\n    setTooltip(show, color, name, capacity, lowCarbon, operator, open, fuel, chp) {\r\n        if (show) {\r\n\r\n            ReactDOM.render(\r\n                React.createElement(\r\n                    PopupContent, {\r\n                    color, name, capacity, lowCarbon, operator, open, fuel, chp\r\n                }\r\n                ),\r\n                this.tooltipContainer\r\n            )\r\n        } else {\r\n\r\n            ReactDOM.unmountComponentAtNode(this.tooltipContainer)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevState) {\r\n \r\n        //   console.log(this.props.filter)\r\n        if (this.props.activeYear !== this.state.currentYear) {\r\n            //  console.log(\"new year: \" + this.props.activeYear)\r\n            this.setState({\r\n                currentYear: this.props.activeYear\r\n\r\n            })\r\n            this.m_filterStartYear = ['<=', ['number', ['get', 'yearStart']], this.props.activeYear]\r\n            this.m_filterEndYear = ['>=', ['number', ['get', 'yearEnd']], this.props.activeYear]\r\n            this.updateFilters()\r\n        }\r\n        if (this.props.types !== this.state.rawtypes) {\r\n            this.m_filterType = [\"any\"]\r\n            //create the filter syntax fromthe actionFilter provided\r\n            for (var i = 0; i < this.props.types.length; i++) {\r\n                if (this.props.types[i].active)\r\n                    this.m_filterType.push([\"==\", [\"get\", \"type\"], this.props.types[i].type])\r\n            }\r\n\r\n            this.setState({\r\n\r\n                rawtypes: this.props.types\r\n            })\r\n            this.updateFilters()\r\n        }\r\n        if (this.props.drawOnMap) {\r\n            if (this.map.isStyleLoaded()) {\r\n                if (this.map.getLayer(\"powerplants\")) {\r\n                    this.map.removeLayer(\"powerplants\")\r\n              \r\n                }\r\n                //{colored: true, differentSizes: false, opacity: false, tooltip: false}\r\n                var circlecolor = []\r\n                var opacity\r\n                var tooltip\r\n                var circleradius\r\n                if (this.props.drawOnMap.colored) {\r\n                    circlecolor = [\r\n                        'match',\r\n                        ['get', 'type'],\r\n                        \"Coal\", \"#ced1cc\",\r\n                        \"Storage\", \"#4e80e5\",\r\n                        \"Solar\", \"#ffc83e\",\r\n                        \"Nuclear\", \"#dd54b6\",\r\n                        \"Oil\", \"#a45edb\",\r\n                        \"Hydro\", \"#43cfef\",\r\n                        \"Wave & Tidal\", \"#43cfef\",\r\n                        \"Wind\", \"#00a98e\",\r\n                        \"Biomass\", \"#A7B734\",\r\n                        \"Waste\", \"#ea545c\",\r\n                        \"Gas\", \"#cc9b7a\",\r\n                        '#ccc'\r\n                    ]\r\n                } else {\r\n                    circlecolor = \"#000\"\r\n                }\r\n\r\n                if (this.props.drawOnMap.differentSizes) {\r\n                    circleradius = {\r\n                        property: 'capacity',\r\n                        type: 'exponential',\r\n                        base: 2,\r\n                        stops: [\r\n\r\n                            [{ zoom: 2, value: 1.5 }, 1],\r\n                            [{ zoom: 2, value: 2500 }, 5],\r\n                            [{ zoom: 4.5, value: 1.5 }, 2],\r\n                            [{ zoom: 4.5, value: 2500 }, 21],\r\n                            [{ zoom: 8, value: 1.5 }, 4],\r\n                            [{ zoom: 8, value: 2500 }, 32],\r\n                            [{ zoom: 12, value: 1.5 }, 6],\r\n                            [{ zoom: 12, value: 2500 }, 37],\r\n                            [{ zoom: 15, value: 1.5 }, 8],\r\n                            [{ zoom: 15, value: 2500 }, 42]\r\n                        ]\r\n\r\n                    }\r\n                } else {\r\n                    circleradius = 2\r\n                }\r\n\r\n                if (this.props.drawOnMap.opacity) {\r\n                    opacity = 0.77\r\n                } else {\r\n                    opacity = 1\r\n                }\r\n\r\n                var paint =\r\n                {\r\n                    'circle-radius': circleradius,\r\n                    'circle-color': circlecolor,\r\n                    'circle-opacity': opacity\r\n                }\r\n\r\n                this.map.addLayer({\r\n                    id: 'powerplants',\r\n                    type: 'circle',\r\n                    source: 'powerplants',\r\n                    paint: paint,\r\n                    'filter': ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType, this.m_filterName]\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.tooltipContainer = document.createElement('div');\r\n        this.init()\r\n    }\r\n    testFunction(show) {\r\n\r\n        var o = this.grump\r\n        var name = o.properties.site;\r\n        var capacity = o.properties.capacity;\r\n        var type = o.properties.type;\r\n        var fuelDetail = o.properties.fuelDetail;\r\n        var lowCarbon = o.properties.lowCarbon;\r\n        var operator = o.properties.operator;\r\n        var chp = o.properties.chp;\r\n        var open = o.properties.yearOpen;\r\n        var plantColor = this.m_colors[o.properties.type];\r\n\r\n        this.setTooltip(show, plantColor, name, capacity, lowCarbon, operator, open, this.getFuel(type, fuelDetail), chp)\r\n        // Ensure that if the map is zoomed out such that multiple\r\n        // copies of the feature are visible, the popup appears over the copy being pointed to.\r\n        //   while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n        //      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n        // }\r\n\r\n        // Populate the popup and set its coordinates\r\n        // based on the feature found.\r\n        //  this.popup.setLngLat(coordinates)\r\n        //      .setHTML(<PopupContent color={plantColor} name={name} capacity={this.roundToOne(capacity)} lowCarbon={lowCarbon} operator={operator} open={open} fuel={this.getFuel(type, fuelDetail)} chp={chp} />)\r\n        //      .addTo(this.map);\r\n    }\r\n\r\n    setFilterType(filtertype) {\r\n        if (this.map.isStyleLoaded()) {\r\n            this.m_filterType = [\"all\", [\"==\", [\"get\", \"type\"], filtertype]]\r\n            this.updateFilters()\r\n        }\r\n    }\r\n\r\n    setFilterName(name) {\r\n        if (this.map.isStyleLoaded()) {\r\n            if (name !== \"all\") {\r\n                this.m_filterName = [\"all\", [\"!=\", [\"get\", \"site\"], name]]\r\n\r\n            } else {\r\n                this.m_filterName = null\r\n            }\r\n            this.updateFilters()\r\n        }\r\n    }\r\n    updateFilters() {\r\n        if (this.map.isStyleLoaded()) {\r\n            // map.setFilter('powerplants', ['all', filterOperator, filterType, filterStartYear, filterEndYear, filterSite, filterCapacity]);\r\n            this.map.setFilter('powerplants', ['all', this.m_filterStartYear, this.m_filterEndYear, this.m_filterType, this.m_filterName])\r\n        }\r\n    }\r\n\r\n    getFuel = (type, fuelDetail) => {\r\n        if (fuelDetail === \"-\") {\r\n            return type\r\n        } else if (type === \"Wind\" || type === \"Hydro\") {\r\n            return fuelDetail\r\n        } else {\r\n            return type + \", \" + fuelDetail\r\n        }\r\n    }\r\n\r\n    roundToOne = (capacity) => {\r\n        return +(Math.round(capacity + \"e+1\") + \"e-1\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div style={{ height: this.props.height }} ref={el => this.mapContainer = el} className=\"mapContainer topDistance\" id=\"map\" />\r\n\r\n        )\r\n    }\r\n\r\n}\r\nconst PopupContent = ({ color, name, capacity, lowCarbon, operator, open, fuel, chp }) => (\r\n    <div className={`colour-key popupDiv`}>\r\n        <h3 className=\"popupHeading\" style={{ color: color }}> {name}</h3>\r\n        <div className=\"popupInfo\" style={{ 'backgroundColor': color }} >\r\n            <p className=\"inline\">{fuel}</p>\r\n            <p><span className=\"label-title\">Capacity: </span>{capacity}<span className=\"units\">MW</span></p>\r\n            <p><span className=\"label-title\">Low carbon? </span>{lowCarbon}</p>{chp !== \"-\" ? <p><span className=\"label-title\">Combined heat and power?</span>{chp}</p> : \"\"}\r\n            <p><span className=\"label-title\">Operator: </span> {operator}</p>\r\n            <p><span className=\"label-title\">Year opened: </span> {open} </p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n","// with help from https://bl.ocks.org/reinson/166bae46dd106b45cf2d77c7802768ca\r\n\r\n// zero data converted to 0.001 to avoid messing up the order of the colours if bars are added/removed\r\nimport React, { PureComponent } from 'react';\r\nimport {\r\n  BarChart, Bar, Legend\r\n} from 'recharts';\r\n\r\n  \r\n  export default class Stackedbarchart extends PureComponent {\r\n    static jsfiddleUrl = 'https://jsfiddle.net/alidingling/90v76x08/';\r\n   \r\n\r\n    render() {\r\n      return (\r\n         <div>\r\n        <BarChart\r\n          width={this.props.width+20}\r\n          height={this.props.height}\r\n          data={this.props.percentages}\r\n          reverseStackOrder={true}\r\n        >\r\n         \r\n          <Bar dataKey=\"Coal\" stackId=\"a\" fill=\"#ced1cc\" />\r\n          \r\n         \r\n          <Bar dataKey=\"Gas\" stackId=\"a\" fill=\"#cc9b7a\" />\r\n          <Bar dataKey=\"Hydro\" stackId=\"a\" fill=\"#43cfef\" />\r\n          <Bar dataKey=\"Oil\" stackId=\"a\" fill=\"#a45edb\" />\r\n          <Bar dataKey=\"Nuclear\" stackId=\"a\" fill=\"#dd54b6\" />\r\n          <Bar dataKey=\"Wind\" stackId=\"a\" fill=\"#00a98e\" />\r\n          <Bar dataKey=\"Solar\" stackId=\"a\" fill=\"#ffc83e\" />\r\n          <Bar dataKey=\"Biomass\" stackId=\"a\" fill=\"#A7B734\" />\r\n            <Legend layout=\"vertical\" align=\"left\" verticalAlign=\"middle\" iconType=\"rect\"/>\r\n        </BarChart>\r\n        \r\n       </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n","import img1 from './images/piechart1.png'\r\nimport gif2 from './images/image-ANIMATION.gif'\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nexport default class SimpleWebsite extends Component {\r\n\r\n// renders a simple website with the charts and graphs created in Excel\r\n\r\nrender() {\r\n    return (\r\n        <section id = \"simpleWebsite\">\r\n        <h1> This is a simple website</h1>\r\n        <p> I can display images that were created previously on this site, and explain things!</p>\r\n        <img src={img1} alt=\"piechart2005\" />\r\n        <p> In 2005, large parts of the UK power capacity was generated via coal and gas plants. Over time, change happened, with more solar and wind plants popping up. By 2020, coal was completely eliminated.</p>\r\n        <img src={gif2} alt=\"OverTime Gif\" />\r\n        </section>\r\n        \r\n    )\r\n}\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css'\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport data2 from './ukdata/power_stations.json'\nimport MapFunctions from './MapFunctions.js';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\nimport Stackedbarchart from './stacked-bar.js'\nimport SimpleWebsite from './SimpleWebsite.js'\n\n\n//images\nimport tableData from './images/tableData.png'\nimport jsonData from './images/JSONdata.png'\nclass ScrollyTeller extends Component {\n\n    imagesOnsite =  [tableData,jsonData]\n    IMAGE = 0\n    MAP = 1\n\n    NONE = 2\n\n    COMPONENT = 3\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight, panelHeight: window.innerHeight-100 });\n\n      };\n    componentDidUpdate(prevState) {\n        if (prevState.types !== this.state.types && prevState.types!==undefined) {\n        //    console.log(prevState.types)\n         //   console.log(this.state.types)\n            var vfilter = [\"any\"]\n            for (var i = 0; i < this.state.types.length; i++) {\n                var type = this.state.types[i]\n                if (type.active) {\n                    vfilter.push([\"==\", [\"get\", \"type\"], type.type])\n                }\n            }\n            this.setState({\n                filter: vfilter\n            })\n           // this.m_mapFunctions.setFilterTypeString(filter)\n        }\n\n        if(prevState.activeId !== this.state.activeId && prevState.activeId!==undefined){\n            this.updatePercentages()\n        }\n    }\n    //  m_mapfilter = null;\n    state = {\n        percentageCalcs: {},\n        sections: [],\n        width: 0,\n        height: 0,\n        filter: \"\",\n        drawOnMap: \"\",\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        activeTypeContent: this.NONE, \n        panelHeight: 800,\n        types: [{ \"type\": \"Coal\", \"active\": true },\n        { \"type\": \"Gas\", \"active\": true },\n        { \"type\": \"Oil\", \"active\": true },\n        { \"type\": \"Nuclear\", \"active\": true },\n        { \"type\": \"Hydro\", \"active\": true },\n        { \"type\": \"Wind\", \"active\": true },\n        { \"type\": \"Waste\", \"active\": true },\n        { \"type\": \"Solar\", \"active\": true }],\n\n        percentages: [{ \"type\": \"Coal\", \"percentage\": 45 },\n        { \"type\": \"Gas\", \"percentage\": 10  },\n        { \"type\": \"Oil\", \"percentage\": 10  },\n        { \"type\": \"Nuclear\", \"percentage\": 15  },\n        { \"type\": \"Hydro\", \"percentage\": 8  },\n        { \"type\": \"Wind\", \"percentage\": 6  },\n        { \"type\": \"Waste\", \"percentage\": 3  },\n        { \"type\": \"Solar\", \"percentage\": 3  }]\n    }\n    panelChanged = false\n   // m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n\n    updatePercentages = () => {\n  \n        var year = this.state.sections[this.state.activeId].year\n       // console.log(year)\n        var arr = []\n        var yearPerc = this.state.percentageCalcs[year]\n     \n        //console.log(yearPerc)\n        for(var key in yearPerc){\n            var obj = {\"type\" : key, \"percentage\" : yearPerc[key], \"name\": key}\n            arr.push(obj)\n        }\n        obj = {}\n        for(var i = 0; i < arr.length;i++){\n            obj[arr[i].type] = arr[i].percentage\n        }\n        var t = []\n        t.push(obj)\n        this.setState({\n            percentages: t\n        })\n        //console.log(t)\n    }\n    UNSAFE_componentWillMount = function () {\n        window.addEventListener('resize', this.updateDimensions);\n        this.updateDimensions()\n        \n    \n        for (var i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].section, sectiondata.sections[i].paragraphs)\n       //     console.log(sectiondata.sections[i].renderparagraphs)\n        }\n        //  console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n        var helperArray = {}\n        var tempArr = {}\n        //fill percentage calculations\n        for(var j =0; j < data2.features.length; j++){\n            var obj = data2.features[j]\n            var yearstart = data2.features[j].properties.yearStart\n            var yearend = data2.features[j].properties.yearEnd\n            for(var k = yearstart; k <=yearend; k++){\n                if(tempArr[k]){\n                    if(tempArr[k][obj.properties.type]){\n                        tempArr[k][obj.properties.type]+=obj.properties.capacity\n                    } else {\n                        tempArr[k][obj.properties.type]=obj.properties.capacity\n                    }\n                    helperArray[k]+= obj.properties.capacity\n                } else {\n                    tempArr[k] = {}\n                    tempArr[k][obj.properties.type]=obj.properties.capacity\n                    helperArray[k] = obj.properties.capacity\n                }\n            }\n        }\n       // console.log(helperArray)\n        //now normalise to 100%\n        for(var key in helperArray){\n            for(var key2 in  tempArr[key]){\n                var num = tempArr[key][key2]\n                num = (num / helperArray[key]) * 100\n                tempArr[key][key2] = num\n            }\n        }\n        this.setState({\n            percentageCalcs: tempArr\n        })\n\n        /* this needs to be done once at the beginning and then when the component updates */\n        var year = sectiondata.sections[0].year\n       // console.log(year)\n        var arr = []\n        var yearPerc = tempArr[year]\n     \n        //console.log(yearPerc)\n        for(var key in yearPerc){\n            var obj = {\"type\" : key, \"percentage\" : yearPerc[key], \"name\": key}\n            arr.push(obj)\n        }\n        obj = {}\n        for(var i = 0; i < arr.length;i++){\n            obj[arr[i].type] = arr[i].percentage\n        }\n        var t = []\n        t.push(obj)\n        this.setState({\n            percentages: t\n        })\n\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n      }\n    allPanels = []\n\n    setDrawOnMap = (drawOnMapi) => {\n\n        this.setState({\n            drawOnMap: drawOnMapi\n        })\n    }\n    setActiveID = (id,typeContent,imgUrlId) => {\n      \n        this.setState({\n            activeId: id,\n            activeTypeContent: typeContent,\n            activeImageUrl: this.imagesOnsite[imgUrlId]\n        })\n        //this.m_mapFunctions.setFilterYearStart(this.state.years[id])\n     //   this.m_mapFunctions.setFilterStartEnd(this.state.sections[id].year)\n\n        this.updatePercentages()\n        //in each year i want to display plants that HAVE STARTED but NOT YET ENDED\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        var result = [];\n        var filter = \"\";\n        var drawOnMap = \"\"\n        var key =\"\"\n        for (var i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (var j = 0; j < paragraphs[i].features.length; j++) {\n                    var feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    } else if(feature.type ===\"boldfont\"){\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<b>' + feature.text + '</b>')\n                    }else if(feature.type ===\"italicfont\"){\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<i>' + feature.text + '</i>')\n                    }\n\n                    \n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (j = 0; j < paragraphs[i].actions.length; j++) {\n                    var action = paragraphs[i].actions[j]\n                    if (action.highlight) {\n                        if(action.highlight.type===\"type\"){\n                            filter = {\n\n                                \"action\":this.setActiveMulti,\n                                \"objects\": []\n                            }\n                        } else if ( action.highlight.type===\"plant\"){\n                            filter = {\n\n                                \"action\":this.setActiveName,\n                                \"objects\": []\n                            }\n                        }\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (var k = 0; k < action.highlight.keywords.length; k++) {\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k], \"<span class='\" + action.highlight.keywords[k] + \"'>\" + action.highlight.keywords[k] + \"</span>\")\n                            filter.objects.push(this.cap(action.highlight.keywords[k]))\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    }\n                    if(action.mapdemo){\n                        filter = {\n\n                            \"action\":this.setDrawOnMap,\n                            \"objects\": action.mapdemo\n                        }\n\n                    }\n                }\n            }\n\n            if(paragraphs[i].imageId){\n                paragraphs[i].image = this.imagesOnsite[paragraphs[i].imageId]\n            }\n            result.push(  \n                    <div  content={paragraphs[i]} id={key} actionFilter={filter} drawOnMap={drawOnMap}  />\n            )\n        }\n       // console.log(result)\n        return result\n\n    }\n\n    //gets called from child components or when the user clicked the type nav menu. updates state of that menu accordingly, also when a scrolltrigger (de)activated a type\n    setActiveMulti=(types)=> {\n       \n        var arr = null\n        if(types===null){\n             arr = [{ \"type\": \"Coal\", \"active\": true },\n             { \"type\": \"Gas\", \"active\": true },\n             { \"type\": \"Oil\", \"active\": true },\n             { \"type\": \"Nuclear\", \"active\": true },\n             { \"type\": \"Hydro\", \"active\": true },\n             { \"type\": \"Wind\", \"active\": true },\n             { \"type\": \"Waste\", \"active\": true },\n             { \"type\": \"Solar\", \"active\": true }]\n             \n        } else {\n            arr = [{ \"type\": \"Coal\", \"active\": false },\n             { \"type\": \"Gas\", \"active\": false },\n             { \"type\": \"Oil\", \"active\": false },\n             { \"type\": \"Nuclear\", \"active\": false },\n             { \"type\": \"Hydro\", \"active\": false },\n             { \"type\": \"Wind\", \"active\": false },\n             { \"type\": \"Waste\", \"active\": false },\n             { \"type\": \"Solar\", \"active\": false }]\n             for(var i = 0; i < arr.length; i++){\n                 for(var j = 0; j < types.length; j++){\n                    if(arr[i].type === types[j]){\n                        arr[i].active=true\n                        break;\n                    }\n                 }\n             }\n             \n        }\n        this.setState({\n            types: arr\n        })\n    }\n    \n    setActive=(ttype, active) =>{\n        //  console.log(index)\n        this.setState(state => {\n            const types = state.types.map((type, i) => {\n                if (type === ttype) {\n                    return { \"type\": type.type, \"active\": active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n\n    setActiveName = (name) => {\n        \n    }\n    toggleActive=(ttype)=> {\n         console.log(ttype)\n        this.setState(state => {\n            const types = state.types.map((type) => {\n                if (type.type === ttype) {\n                    return { \"type\": type.type, \"active\": !type.active }\n                } else {\n                    return type;\n                }\n            });\n            return {\n                types\n            };\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"navbar\" id=\"yearNav\">\n                    {this.state.sections.map(\n                        (section, i) =>\n                            <NavMenuItem\n                                key={i}\n                                id={i}\n                                name={section.section}\n                                activeId={this.state.activeId}\n                            />\n                    )}\n                </div>\n       {/*}         <div className=\"navbar\" id=\"typeNav\">\n                    {this.state.types.map(\n                        (type, i) =>\n                            <NavMenuTypeItem\n                                key={i}\n                                onClickA={this.toggleActive}\n                                type={type.type}\n                                active={type.active}\n                            />\n                    )}\n                </div>*/\n                    }\n                <div className=\"MainContainer\">\n                {/* <StackedBar  percentages={this.state.percentages} height={this.state.panelHeight}/>*/}\n                    <div className=\"Panels\" style={{height: this.state.panelHeight, margin: this.state.activeTypeContent === this.NONE ? \"auto\" : \"\", width: this.state.activeTypeContent === this.NONE ? \"60%\" : \"45%\", top: \"200px\"}}>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n                              \n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    typeContent={section.typeContent}\n                                    app={this}\n                                    imgUrl={ section.imageId}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.section}\n                                    anchorname={\"section\" + section.section}\n                                    paragraphs={section.renderparagraphs}\n                                />\n                            )}\n                    </div>\n                    { \n                        this.state.activeTypeContent === this.MAP ?\n                            <MapFunctions types={this.state.types} data={data2} height={this.state.panelHeight} drawOnMap={this.state.drawOnMap} filter={this.state.filter} activeYear={this.state.sections !== undefined ?  this.state.sections[this.state.activeId].year : \"2004\"} />\n                        :\n                            this.state.activeTypeContent === this.IMAGE ?\n                                <ImageDisp src = {this.state.activeImageUrl } alt = {this.state.activeImageUrl}/>\n                                :  this.state.activeTypeContent === this.COMPONENT ? \n                                <SimpleWebsite />\n\n                                :\n                                <div>Test</div>\n\n                    }      \n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nconst ImageDisp = ({src,alt}) => (\n\n    <div className =\"imageDisp\">\n\n        <img src = {src} alt = {alt} />\n    </div>\n    \n)\nclass NavMenuTypeItem extends Component {\n    handleClick = () => {\n      this.props.onClickA(this.props.type);\n    }\n  \n    render() {\n      return (\n        <div onClick={this.handleClick} className={`navItem ${this.props.active ? \"navItemActive\" : \"\"}`}> {this.props.type} </div>\n        \n      );\n    }\n}\n\nclass StackedBar extends Component {\n    render () {\n        return(\n            <div className=\"leftSide topDistance\" style={{height: this.props.height}}  id=\"stackedBar\">\n                <Stackedbarchart   percentages={this.props.percentages} width={120} height={this.props.height}> Placeholder for stacked bar</Stackedbarchart>\n            </div>\n    )}\n}\nconst NavMenuItem = ({ id, name, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#section${name}`}\n        alignToTop={true} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"}`}> {name} </div>\n    </ScrollIntoView>\n)\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}